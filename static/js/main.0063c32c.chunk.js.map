{"version":3,"sources":["Movie.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["MoviePoster","_ref2","poster","alt","react_default","a","createElement","src","title","className","MovieGenre","_ref3","genre","Movie","_ref","genres","synopsis","map","index","key","App","state","greeting","_renderMovies","_this","movies","movie","src_Movie","title_english","medium_cover_image","id","_getMovies","_callee","regenerator_default","wrap","_context","prev","next","_callApi","sent","setState","stop","fetch","then","potato","json","data","catch","err","console","log","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"yQA6DA,SAASA,EAATC,GAAoC,IAAdC,EAAcD,EAAdC,OAAQC,EAAMF,EAANE,IAC1B,OACIC,EAAAC,EAAAC,cAAA,OAAKC,IAAKL,EAAQC,IAAKA,EAAKK,MAAOL,EAAKM,UAAU,iBAI1D,SAASC,EAATC,GAA6B,IAARC,EAAQD,EAARC,MACjB,OACIR,EAAAC,EAAAC,cAAA,QAAMG,UAAU,eAAeG,GAYxBC,MA5Df,SAAAC,GAAkD,IAAlCN,EAAkCM,EAAlCN,MAAON,EAA2BY,EAA3BZ,OAAQa,EAAmBD,EAAnBC,OAAQC,EAAWF,EAAXE,SACnC,OACIZ,EAAAC,EAAAC,cAAA,OAAKG,UAAU,SACXL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,iBACXL,EAAAC,EAAAC,cAACN,EAAD,CAAaE,OAAQA,EAAQC,IAAKK,KAEtCJ,EAAAC,EAAAC,cAAA,OAAKG,UAAU,iBACXL,EAAAC,EAAAC,cAAA,UAAKE,GACLJ,EAAAC,EAAAC,cAAA,OAAKG,UAAU,gBACVM,EAAOE,IAAI,SAACL,EAAOM,GAAR,OAAkBd,EAAAC,EAAAC,cAACI,EAAD,CAAYE,MAAOA,EAAOO,IAAKD,MAC7Dd,EAAAC,EAAAC,cAAA,KAAGG,UAAU,kBACRO,OC+DVI,oNApFbC,MAAQ,CACNC,SAAW,YAsCbC,cAAgB,WAUd,OATeC,EAAKH,MAAMI,OAAOR,IAAI,SAAAS,GACnC,OAAOtB,EAAAC,EAAAC,cAACqB,EAAD,CACLnB,MAAOkB,EAAME,cACb1B,OAAQwB,EAAMG,mBACdV,IAAKO,EAAMI,GACXf,OAAQW,EAAMX,OACdC,SAAUU,EAAMV,gBAMrBe,gCAAa,SAAAC,IAAA,IAAAP,EAAA,OAAAQ,EAAA5B,EAAA6B,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACSb,EAAKc,WADd,OACNb,EADMU,EAAAI,KAGZf,EAAKgB,SAAS,CACZf,WAJU,wBAAAU,EAAAM,SAAAT,QAQdM,SAAW,WACT,OAAOI,MAAM,6DACZC,KAAK,SAAAC,GAAM,OAAIA,EAAOC,SACtBF,KAAK,SAAAE,GAAI,OAAIA,EAAKC,KAAKrB,SACvBsB,MAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,yFA5B1BG,KAAKpB,8CA+BE,IACAN,EAAU0B,KAAK9B,MAAfI,OACP,OACErB,EAAAC,EAAAC,cAAA,OAAKG,UAAWgB,EAAQ,MAAQ,eAQ7B0B,KAAK9B,MAAMI,OAAS0B,KAAK5B,gBAAkB,kBAhFlC6B,cCGEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCRNC,IAASC,OAAOvD,EAAAC,EAAAC,cAACsD,EAAD,MAASC,SAASC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtB,KAAK,SAAAuB,GACjCA,EAAaC,6FEnInBC,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.0063c32c.chunk.js","sourcesContent":["import React, { Component} from 'react';\nimport PropTypes from 'prop-types';\nimport './Movie.css';\n\n// class Movie extends Component {\n//     static propTypes = { //type check가 가능함.\n//         //isRequired : 필수로 지정되어야함.\n//         title : PropTypes.string.isRequired,\n//         poster : PropTypes.string.isRequired\n//     }\n\n//     render() {\n//         return(\n//             <div>\n//                 <MoviePoster poster={this.props.poster}/>\n//                 <h1>{this.props.title}</h1>\n//             </div>\n//         )\n//     }\n// }\n\nfunction Movie({title, poster, genres, synopsis}) {\n    return (\n        <div className=\"Movie\">\n            <div className=\"Movie_Columns\">\n                <MoviePoster poster={poster} alt={title}/>\n            </div>\n            <div className=\"Movie_Columns\">\n                <h1>{title}</h1>\n                <div className=\"Movie_Genres\">\n                    {genres.map((genre, index) => <MovieGenre genre={genre} key={index}/>)}\n                    <p className=\"Movie_Synopsis\">\n                        {synopsis}\n                    </p>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nMovie.propTypes = {\n    title: PropTypes.string.isRequired,\n    poster : PropTypes.string.isRequired,\n    genres : PropTypes.array.isRequired,\n    synopsis : PropTypes.string.isRequired\n}\n// class MoviePoster extends Component {\n//     static propTypes = {\n//         poster : PropTypes.string.isRequired\n//     }\n    \n//     render() {\n//         return (\n//             <img src={this.props.poster}/>\n//         )\n//     }\n// }\n\n//stateless -> 1개의 props, 1개의 html채그만 있음.\n//they dont have any life ctcle, function render....\n//only have return\nfunction MoviePoster({poster, alt}) {\n    return (\n        <img src={poster} alt={alt} title={alt} className=\"Movie_Poster\"/>\n    )\n}\n\nfunction MovieGenre({genre}) {\n    return (\n        <span className=\"Movie_Genre\">{genre}</span>\n    )\n}\n\nMoviePoster.propTypes = {\n    poster : PropTypes.string.isRequired,\n    alt : PropTypes.string.isRequired\n}\n\nMovieGenre.propTypes = {\n    genre : PropTypes.string.isRequired\n}\nexport default Movie;","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Movie from './Movie';\nimport { timingSafeEqual } from 'crypto';\n\n\n//all component has render function\n//render is what is the component show to me\nclass App extends Component { \n  //state --> component안에서 state가 바뀔때마다 다시 render가 동작함\n  state = {\n    greeting : \"Hello!\"\n  } //default state\n  //state, stateless component\n  //smart(state) component\n  //dumb(stateless) component : only has props\n\n  componentDidMount () {\n    // setTimeout(() => {\n    //   this.setState({\n    //     movies : [\n    //       //...this.state.movies, //기존의 내용에 추가하려면..!\n    //         {\n    //           title : \"Matrix\",\n    //           poster : \"https://upload.wikimedia.org/wikipedia/en/thumb/c/c1/The_Matrix_Poster.jpg/220px-The_Matrix_Poster.jpg\"\n    //         },\n          \n    //         {\n    //           title : \"Full Metal Jacket\",\n    //           poster : \"https://m.media-amazon.com/images/M/MV5BNzkxODk0NjEtYjc4Mi00ZDI0LTgyYjEtYzc1NDkxY2YzYTgyXkEyXkFqcGdeQXVyNzkwMjQ5NzM@._V1_.jpg\"\n    //         },\n    //         {\n    //           title : \"Oldboy\",\n    //           poster : \"https://upload.wikimedia.org/wikipedia/en/thumb/6/67/Oldboykoreanposter.jpg/220px-Oldboykoreanposter.jpg\"\n    //         },\n    //         {\n    //           title : \"Star Wars\",\n    //           poster : \"https://m.media-amazon.com/images/M/MV5BNzVlY2MwMjktM2E4OS00Y2Y3LWE3ZjctYzhkZGM3YzA1ZWM2XkEyXkFqcGdeQXVyNzkwMjQ5NzM@._V1_.jpg\"\n    //         },\n    //         {\n    //           title : \"Transpotting\",\n    //           poster : \"https://m.media-amazon.com/images/M/MV5BNzVlY2MwMjktM2E4OS00Y2Y3LWE3ZjctYzhkZGM3YzA1ZWM2XkEyXkFqcGdeQXVyNzkwMjQ5NzM@._V1_.jpg\"\n    //         }\n    //       ]\n    //   })\n    // }, 1000)\n    this._getMovies();\n  }//after mount, change state\n  \n  _renderMovies = () => {\n    const movies = this.state.movies.map(movie => {\n      return <Movie \n        title={movie.title_english}\n        poster={movie.medium_cover_image}\n        key={movie.id}\n        genres={movie.genres}\n        synopsis={movie.synopsis}/>\n    })\n\n    return movies;\n  }\n\n   _getMovies = async () => { //asynchronous\n    const movies = await this._callApi(); //waiting this function finished\n    //it's not going to happen until _callApi function is finished\n    this.setState({\n      movies\n    })\n  }\n\n  _callApi = () => {\n    return fetch('https://yts.am/api/v2/list_movies.json?sort_by=like_count')\n    .then(potato => potato.json()) //when fetch is finished\n    .then(json => json.data.movies)\n    .catch(err => console.log(err)); // catch an error\n  }\n\n  render() {\n    const {movies} = this.state;\n    return (\n      <div className={movies? \"App\" : \"App_Loading\"}>\n        {/* {this.state.greeting}\n        {this.state.movies.map((movie, index) => {\n         //map으로 리턴할 때는 각 컴포넌트에는 key가 필요함. \n         return  <Movie title={movie.title} poster={movie.poster} key={index}/>\n        })} */}\n\n        {/* 로딩형태로 만드는 방법 */}\n        {this.state.movies ? this._renderMovies() : 'Loading'}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n//react  : UI library\n//react DOM : help react to render on our website\n\n//react DOM renders one component\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}